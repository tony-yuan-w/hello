/*
 * Generated by gdbus-codegen 2.56.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __DBUS_GENERATE_CLIENT_H__
#define __DBUS_GENERATE_CLIENT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.philips.chargerMgr */

#define TYPE_ORG_PHILIPS_CHARGER_MGR (org_philips_charger_mgr_get_type ())
#define ORG_PHILIPS_CHARGER_MGR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_PHILIPS_CHARGER_MGR, OrgPhilipsChargerMgr))
#define IS_ORG_PHILIPS_CHARGER_MGR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_PHILIPS_CHARGER_MGR))
#define ORG_PHILIPS_CHARGER_MGR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_PHILIPS_CHARGER_MGR, OrgPhilipsChargerMgrIface))

struct _OrgPhilipsChargerMgr;
typedef struct _OrgPhilipsChargerMgr OrgPhilipsChargerMgr;
typedef struct _OrgPhilipsChargerMgrIface OrgPhilipsChargerMgrIface;

struct _OrgPhilipsChargerMgrIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_resume_charging) (
    OrgPhilipsChargerMgr *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop_charging) (
    OrgPhilipsChargerMgr *object,
    GDBusMethodInvocation *invocation);

  gboolean  (*get_ac_online) (OrgPhilipsChargerMgr *object);

  void (*ac_change) (
    OrgPhilipsChargerMgr *object,
    gboolean arg_state);

};

GType org_philips_charger_mgr_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_philips_charger_mgr_interface_info (void);
guint org_philips_charger_mgr_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_philips_charger_mgr_complete_stop_charging (
    OrgPhilipsChargerMgr *object,
    GDBusMethodInvocation *invocation);

void org_philips_charger_mgr_complete_resume_charging (
    OrgPhilipsChargerMgr *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void org_philips_charger_mgr_emit_ac_change (
    OrgPhilipsChargerMgr *object,
    gboolean arg_state);



/* D-Bus method calls: */
void org_philips_charger_mgr_call_stop_charging (
    OrgPhilipsChargerMgr *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_philips_charger_mgr_call_stop_charging_finish (
    OrgPhilipsChargerMgr *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_philips_charger_mgr_call_stop_charging_sync (
    OrgPhilipsChargerMgr *proxy,
    GCancellable *cancellable,
    GError **error);

void org_philips_charger_mgr_call_resume_charging (
    OrgPhilipsChargerMgr *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_philips_charger_mgr_call_resume_charging_finish (
    OrgPhilipsChargerMgr *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_philips_charger_mgr_call_resume_charging_sync (
    OrgPhilipsChargerMgr *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
gboolean org_philips_charger_mgr_get_ac_online (OrgPhilipsChargerMgr *object);
void org_philips_charger_mgr_set_ac_online (OrgPhilipsChargerMgr *object, gboolean value);


/* ---- */

#define TYPE_ORG_PHILIPS_CHARGER_MGR_PROXY (org_philips_charger_mgr_proxy_get_type ())
#define ORG_PHILIPS_CHARGER_MGR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_PHILIPS_CHARGER_MGR_PROXY, OrgPhilipsChargerMgrProxy))
#define ORG_PHILIPS_CHARGER_MGR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_PHILIPS_CHARGER_MGR_PROXY, OrgPhilipsChargerMgrProxyClass))
#define ORG_PHILIPS_CHARGER_MGR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_PHILIPS_CHARGER_MGR_PROXY, OrgPhilipsChargerMgrProxyClass))
#define IS_ORG_PHILIPS_CHARGER_MGR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_PHILIPS_CHARGER_MGR_PROXY))
#define IS_ORG_PHILIPS_CHARGER_MGR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_PHILIPS_CHARGER_MGR_PROXY))

typedef struct _OrgPhilipsChargerMgrProxy OrgPhilipsChargerMgrProxy;
typedef struct _OrgPhilipsChargerMgrProxyClass OrgPhilipsChargerMgrProxyClass;
typedef struct _OrgPhilipsChargerMgrProxyPrivate OrgPhilipsChargerMgrProxyPrivate;

struct _OrgPhilipsChargerMgrProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgPhilipsChargerMgrProxyPrivate *priv;
};

struct _OrgPhilipsChargerMgrProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_philips_charger_mgr_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgPhilipsChargerMgrProxy, g_object_unref)
#endif

void org_philips_charger_mgr_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgPhilipsChargerMgr *org_philips_charger_mgr_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgPhilipsChargerMgr *org_philips_charger_mgr_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_philips_charger_mgr_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgPhilipsChargerMgr *org_philips_charger_mgr_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgPhilipsChargerMgr *org_philips_charger_mgr_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_PHILIPS_CHARGER_MGR_SKELETON (org_philips_charger_mgr_skeleton_get_type ())
#define ORG_PHILIPS_CHARGER_MGR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_PHILIPS_CHARGER_MGR_SKELETON, OrgPhilipsChargerMgrSkeleton))
#define ORG_PHILIPS_CHARGER_MGR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_PHILIPS_CHARGER_MGR_SKELETON, OrgPhilipsChargerMgrSkeletonClass))
#define ORG_PHILIPS_CHARGER_MGR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_PHILIPS_CHARGER_MGR_SKELETON, OrgPhilipsChargerMgrSkeletonClass))
#define IS_ORG_PHILIPS_CHARGER_MGR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_PHILIPS_CHARGER_MGR_SKELETON))
#define IS_ORG_PHILIPS_CHARGER_MGR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_PHILIPS_CHARGER_MGR_SKELETON))

typedef struct _OrgPhilipsChargerMgrSkeleton OrgPhilipsChargerMgrSkeleton;
typedef struct _OrgPhilipsChargerMgrSkeletonClass OrgPhilipsChargerMgrSkeletonClass;
typedef struct _OrgPhilipsChargerMgrSkeletonPrivate OrgPhilipsChargerMgrSkeletonPrivate;

struct _OrgPhilipsChargerMgrSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgPhilipsChargerMgrSkeletonPrivate *priv;
};

struct _OrgPhilipsChargerMgrSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_philips_charger_mgr_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgPhilipsChargerMgrSkeleton, g_object_unref)
#endif

OrgPhilipsChargerMgr *org_philips_charger_mgr_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.philips.batteryMgr */

#define TYPE_ORG_PHILIPS_BATTERY_MGR (org_philips_battery_mgr_get_type ())
#define ORG_PHILIPS_BATTERY_MGR(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_PHILIPS_BATTERY_MGR, OrgPhilipsBatteryMgr))
#define IS_ORG_PHILIPS_BATTERY_MGR(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_PHILIPS_BATTERY_MGR))
#define ORG_PHILIPS_BATTERY_MGR_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_PHILIPS_BATTERY_MGR, OrgPhilipsBatteryMgrIface))

struct _OrgPhilipsBatteryMgr;
typedef struct _OrgPhilipsBatteryMgr OrgPhilipsBatteryMgr;
typedef struct _OrgPhilipsBatteryMgrIface OrgPhilipsBatteryMgrIface;

struct _OrgPhilipsBatteryMgrIface
{
  GTypeInterface parent_iface;


  gboolean  (*get_qualified) (OrgPhilipsBatteryMgr *object);

  void (*battery_warn) (
    OrgPhilipsBatteryMgr *object,
    guint arg_type);

};

GType org_philips_battery_mgr_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_philips_battery_mgr_interface_info (void);
guint org_philips_battery_mgr_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus signal emissions functions: */
void org_philips_battery_mgr_emit_battery_warn (
    OrgPhilipsBatteryMgr *object,
    guint arg_type);



/* D-Bus property accessors: */
gboolean org_philips_battery_mgr_get_qualified (OrgPhilipsBatteryMgr *object);
void org_philips_battery_mgr_set_qualified (OrgPhilipsBatteryMgr *object, gboolean value);


/* ---- */

#define TYPE_ORG_PHILIPS_BATTERY_MGR_PROXY (org_philips_battery_mgr_proxy_get_type ())
#define ORG_PHILIPS_BATTERY_MGR_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_PHILIPS_BATTERY_MGR_PROXY, OrgPhilipsBatteryMgrProxy))
#define ORG_PHILIPS_BATTERY_MGR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_PHILIPS_BATTERY_MGR_PROXY, OrgPhilipsBatteryMgrProxyClass))
#define ORG_PHILIPS_BATTERY_MGR_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_PHILIPS_BATTERY_MGR_PROXY, OrgPhilipsBatteryMgrProxyClass))
#define IS_ORG_PHILIPS_BATTERY_MGR_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_PHILIPS_BATTERY_MGR_PROXY))
#define IS_ORG_PHILIPS_BATTERY_MGR_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_PHILIPS_BATTERY_MGR_PROXY))

typedef struct _OrgPhilipsBatteryMgrProxy OrgPhilipsBatteryMgrProxy;
typedef struct _OrgPhilipsBatteryMgrProxyClass OrgPhilipsBatteryMgrProxyClass;
typedef struct _OrgPhilipsBatteryMgrProxyPrivate OrgPhilipsBatteryMgrProxyPrivate;

struct _OrgPhilipsBatteryMgrProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgPhilipsBatteryMgrProxyPrivate *priv;
};

struct _OrgPhilipsBatteryMgrProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_philips_battery_mgr_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgPhilipsBatteryMgrProxy, g_object_unref)
#endif

void org_philips_battery_mgr_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgPhilipsBatteryMgr *org_philips_battery_mgr_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgPhilipsBatteryMgr *org_philips_battery_mgr_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_philips_battery_mgr_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgPhilipsBatteryMgr *org_philips_battery_mgr_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgPhilipsBatteryMgr *org_philips_battery_mgr_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_PHILIPS_BATTERY_MGR_SKELETON (org_philips_battery_mgr_skeleton_get_type ())
#define ORG_PHILIPS_BATTERY_MGR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_PHILIPS_BATTERY_MGR_SKELETON, OrgPhilipsBatteryMgrSkeleton))
#define ORG_PHILIPS_BATTERY_MGR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_PHILIPS_BATTERY_MGR_SKELETON, OrgPhilipsBatteryMgrSkeletonClass))
#define ORG_PHILIPS_BATTERY_MGR_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_PHILIPS_BATTERY_MGR_SKELETON, OrgPhilipsBatteryMgrSkeletonClass))
#define IS_ORG_PHILIPS_BATTERY_MGR_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_PHILIPS_BATTERY_MGR_SKELETON))
#define IS_ORG_PHILIPS_BATTERY_MGR_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_PHILIPS_BATTERY_MGR_SKELETON))

typedef struct _OrgPhilipsBatteryMgrSkeleton OrgPhilipsBatteryMgrSkeleton;
typedef struct _OrgPhilipsBatteryMgrSkeletonClass OrgPhilipsBatteryMgrSkeletonClass;
typedef struct _OrgPhilipsBatteryMgrSkeletonPrivate OrgPhilipsBatteryMgrSkeletonPrivate;

struct _OrgPhilipsBatteryMgrSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgPhilipsBatteryMgrSkeletonPrivate *priv;
};

struct _OrgPhilipsBatteryMgrSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_philips_battery_mgr_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgPhilipsBatteryMgrSkeleton, g_object_unref)
#endif

OrgPhilipsBatteryMgr *org_philips_battery_mgr_skeleton_new (void);


/* ---- */

#define TYPE_OBJECT (object_get_type ())
#define OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT, Object))
#define IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT))
#define OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_OBJECT, Object))

struct _Object;
typedef struct _Object Object;
typedef struct _ObjectIface ObjectIface;

struct _ObjectIface
{
  GTypeInterface parent_iface;
};

GType object_get_type (void) G_GNUC_CONST;

OrgPhilipsChargerMgr *object_get_org_philips_charger_mgr (Object *object);
OrgPhilipsBatteryMgr *object_get_org_philips_battery_mgr (Object *object);
OrgPhilipsChargerMgr *object_peek_org_philips_charger_mgr (Object *object);
OrgPhilipsBatteryMgr *object_peek_org_philips_battery_mgr (Object *object);

#define TYPE_OBJECT_PROXY (object_proxy_get_type ())
#define OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_PROXY, ObjectProxy))
#define OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_PROXY, ObjectProxyClass))
#define OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_PROXY, ObjectProxyClass))
#define IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_PROXY))
#define IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_PROXY))

typedef struct _ObjectProxy ObjectProxy;
typedef struct _ObjectProxyClass ObjectProxyClass;
typedef struct _ObjectProxyPrivate ObjectProxyPrivate;

struct _ObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  ObjectProxyPrivate *priv;
};

struct _ObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType object_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectProxy, g_object_unref)
#endif

ObjectProxy *object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define TYPE_OBJECT_SKELETON (object_skeleton_get_type ())
#define OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_SKELETON, ObjectSkeleton))
#define OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_SKELETON, ObjectSkeletonClass))
#define OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_SKELETON, ObjectSkeletonClass))
#define IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_SKELETON))
#define IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_SKELETON))

typedef struct _ObjectSkeleton ObjectSkeleton;
typedef struct _ObjectSkeletonClass ObjectSkeletonClass;
typedef struct _ObjectSkeletonPrivate ObjectSkeletonPrivate;

struct _ObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  ObjectSkeletonPrivate *priv;
};

struct _ObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType object_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectSkeleton, g_object_unref)
#endif

ObjectSkeleton *object_skeleton_new (const gchar *object_path);
void object_skeleton_set_org_philips_charger_mgr (ObjectSkeleton *object, OrgPhilipsChargerMgr *interface_);
void object_skeleton_set_org_philips_battery_mgr (ObjectSkeleton *object, OrgPhilipsBatteryMgr *interface_);

/* ---- */

#define TYPE_OBJECT_MANAGER_CLIENT (object_manager_client_get_type ())
#define OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClient))
#define OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClientClass))
#define OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_OBJECT_MANAGER_CLIENT, ObjectManagerClientClass))
#define IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_OBJECT_MANAGER_CLIENT))
#define IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _ObjectManagerClient ObjectManagerClient;
typedef struct _ObjectManagerClientClass ObjectManagerClientClass;
typedef struct _ObjectManagerClientPrivate ObjectManagerClientPrivate;

struct _ObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  ObjectManagerClientPrivate *priv;
};

struct _ObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (ObjectManagerClient, g_object_unref)
#endif

GType object_manager_client_get_type (void) G_GNUC_CONST;

GType object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __DBUS_GENERATE_CLIENT_H__ */
